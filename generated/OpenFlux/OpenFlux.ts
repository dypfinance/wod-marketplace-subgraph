// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CollectionAdded extends ethereum.Event {
  get params(): CollectionAdded__Params {
    return new CollectionAdded__Params(this);
  }
}

export class CollectionAdded__Params {
  _event: CollectionAdded;

  constructor(event: CollectionAdded) {
    this._event = event;
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CollectionEdited extends ethereum.Event {
  get params(): CollectionEdited__Params {
    return new CollectionEdited__Params(this);
  }
}

export class CollectionEdited__Params {
  _event: CollectionEdited;

  constructor(event: CollectionEdited) {
    this._event = event;
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CollectionOfferAccepted extends ethereum.Event {
  get params(): CollectionOfferAccepted__Params {
    return new CollectionOfferAccepted__Params(this);
  }
}

export class CollectionOfferAccepted__Params {
  _event: CollectionOfferAccepted;

  constructor(event: CollectionOfferAccepted) {
    this._event = event;
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get offeror(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get acceptor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class CollectionOfferCancelled extends ethereum.Event {
  get params(): CollectionOfferCancelled__Params {
    return new CollectionOfferCancelled__Params(this);
  }
}

export class CollectionOfferCancelled__Params {
  _event: CollectionOfferCancelled;

  constructor(event: CollectionOfferCancelled) {
    this._event = event;
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get offeror(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CollectionOfferMade extends ethereum.Event {
  get params(): CollectionOfferMade__Params {
    return new CollectionOfferMade__Params(this);
  }
}

export class CollectionOfferMade__Params {
  _event: CollectionOfferMade;

  constructor(event: CollectionOfferMade) {
    this._event = event;
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get offeror(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CollectionRemoved extends ethereum.Event {
  get params(): CollectionRemoved__Params {
    return new CollectionRemoved__Params(this);
  }
}

export class CollectionRemoved__Params {
  _event: CollectionRemoved;

  constructor(event: CollectionRemoved) {
    this._event = event;
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ListingCancelled extends ethereum.Event {
  get params(): ListingCancelled__Params {
    return new ListingCancelled__Params(this);
  }
}

export class ListingCancelled__Params {
  _event: ListingCancelled;

  constructor(event: ListingCancelled) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ListingEdited extends ethereum.Event {
  get params(): ListingEdited__Params {
    return new ListingEdited__Params(this);
  }
}

export class ListingEdited__Params {
  _event: ListingEdited;

  constructor(event: ListingEdited) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NFTListed extends ethereum.Event {
  get params(): NFTListed__Params {
    return new NFTListed__Params(this);
  }
}

export class NFTListed__Params {
  _event: NFTListed;

  constructor(event: NFTListed) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class NFTPurchased extends ethereum.Event {
  get params(): NFTPurchased__Params {
    return new NFTPurchased__Params(this);
  }
}

export class NFTPurchased__Params {
  _event: NFTPurchased;

  constructor(event: NFTPurchased) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get paymentToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OfferAcceptedForNFT extends ethereum.Event {
  get params(): OfferAcceptedForNFT__Params {
    return new OfferAcceptedForNFT__Params(this);
  }
}

export class OfferAcceptedForNFT__Params {
  _event: OfferAcceptedForNFT;

  constructor(event: OfferAcceptedForNFT) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get offeror(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class OfferCancelledForNFT extends ethereum.Event {
  get params(): OfferCancelledForNFT__Params {
    return new OfferCancelledForNFT__Params(this);
  }
}

export class OfferCancelledForNFT__Params {
  _event: OfferCancelledForNFT;

  constructor(event: OfferCancelledForNFT) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get offeror(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OfferMadeForNFT extends ethereum.Event {
  get params(): OfferMadeForNFT__Params {
    return new OfferMadeForNFT__Params(this);
  }
}

export class OfferMadeForNFT__Params {
  _event: OfferMadeForNFT;

  constructor(event: OfferMadeForNFT) {
    this._event = event;
  }

  get nftAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get offeror(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OpenFlux__collectionsResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getCollectionFeeRate(): BigInt {
    return this.value1;
  }
}

export class OpenFlux__getAllListingsForCollectionResultValue1Struct extends ethereum.Tuple {
  get nftAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get seller(): Address {
    return this[2].toAddress();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get paymentToken(): Address {
    return this[4].toAddress();
  }

  get duration(): i32 {
    return this[5].toI32();
  }

  get expiresAt(): BigInt {
    return this[6].toBigInt();
  }
}

export class OpenFlux__getAllListingsForCollectionResult {
  value0: Array<BigInt>;
  value1: Array<OpenFlux__getAllListingsForCollectionResultValue1Struct>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<OpenFlux__getAllListingsForCollectionResultValue1Struct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<OpenFlux__getAllListingsForCollectionResultValue1Struct> {
    return this.value1;
  }
}

export class OpenFlux__getAllOffersForCollectionResultValue1Struct extends ethereum.Tuple {
  get offeror(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get paymentToken(): Address {
    return this[2].toAddress();
  }

  get duration(): i32 {
    return this[3].toI32();
  }

  get expiresAt(): BigInt {
    return this[4].toBigInt();
  }
}

export class OpenFlux__getAllOffersForCollectionResult {
  value0: Array<BigInt>;
  value1: Array<OpenFlux__getAllOffersForCollectionResultValue1Struct>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<OpenFlux__getAllOffersForCollectionResultValue1Struct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<OpenFlux__getAllOffersForCollectionResultValue1Struct> {
    return this.value1;
  }
}

export class OpenFlux__getAllOffersForNFTResultValue1Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get offeror(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get paymentToken(): Address {
    return this[3].toAddress();
  }

  get duration(): i32 {
    return this[4].toI32();
  }

  get expiresAt(): BigInt {
    return this[5].toBigInt();
  }
}

export class OpenFlux__getAllOffersForNFTResult {
  value0: Array<BigInt>;
  value1: Array<OpenFlux__getAllOffersForNFTResultValue1Struct>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<OpenFlux__getAllOffersForNFTResultValue1Struct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<OpenFlux__getAllOffersForNFTResultValue1Struct> {
    return this.value1;
  }
}

export class OpenFlux__getUserCollectionOffersResultValue0Struct extends ethereum.Tuple {
  get offeror(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get paymentToken(): Address {
    return this[2].toAddress();
  }

  get duration(): i32 {
    return this[3].toI32();
  }

  get expiresAt(): BigInt {
    return this[4].toBigInt();
  }
}

export class OpenFlux__getUserListingsResultValue0Struct extends ethereum.Tuple {
  get nftAddress(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get seller(): Address {
    return this[2].toAddress();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get paymentToken(): Address {
    return this[4].toAddress();
  }

  get duration(): i32 {
    return this[5].toI32();
  }

  get expiresAt(): BigInt {
    return this[6].toBigInt();
  }
}

export class OpenFlux__getUserOffersForNFTsResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get offeror(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get paymentToken(): Address {
    return this[3].toAddress();
  }

  get duration(): i32 {
    return this[4].toI32();
  }

  get expiresAt(): BigInt {
    return this[5].toBigInt();
  }
}

export class OpenFlux__listingsResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: BigInt;
  value4: Address;
  value5: i32;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: BigInt,
    value4: Address,
    value5: i32,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getNftAddress(): Address {
    return this.value0;
  }

  getTokenId(): BigInt {
    return this.value1;
  }

  getSeller(): Address {
    return this.value2;
  }

  getPrice(): BigInt {
    return this.value3;
  }

  getPaymentToken(): Address {
    return this.value4;
  }

  getDuration(): i32 {
    return this.value5;
  }

  getExpiresAt(): BigInt {
    return this.value6;
  }
}

export class OpenFlux__offersForNFTResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: i32;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: i32,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getOfferor(): Address {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }

  getPaymentToken(): Address {
    return this.value3;
  }

  getDuration(): i32 {
    return this.value4;
  }

  getExpiresAt(): BigInt {
    return this.value5;
  }
}

export class OpenFlux__offersForWholeCollectionResult {
  value0: Address;
  value1: BigInt;
  value2: Address;
  value3: i32;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Address,
    value3: i32,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getOfferor(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getPaymentToken(): Address {
    return this.value2;
  }

  getDuration(): i32 {
    return this.value3;
  }

  getExpiresAt(): BigInt {
    return this.value4;
  }
}

export class OpenFlux extends ethereum.SmartContract {
  static bind(address: Address): OpenFlux {
    return new OpenFlux("OpenFlux", address);
  }

  activeTokenIdsForOffers(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "activeTokenIdsForOffers",
      "activeTokenIdsForOffers(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_activeTokenIdsForOffers(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeTokenIdsForOffers",
      "activeTokenIdsForOffers(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvedTokens(param0: Address): boolean {
    let result = super.call(
      "approvedTokens",
      "approvedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_approvedTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedTokens",
      "approvedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  collections(param0: Address): OpenFlux__collectionsResult {
    let result = super.call(
      "collections",
      "collections(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new OpenFlux__collectionsResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_collections(
    param0: Address
  ): ethereum.CallResult<OpenFlux__collectionsResult> {
    let result = super.tryCall(
      "collections",
      "collections(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpenFlux__collectionsResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  contractCommissionRate(): BigInt {
    let result = super.call(
      "contractCommissionRate",
      "contractCommissionRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contractCommissionRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractCommissionRate",
      "contractCommissionRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllListingsForCollection(
    _collectionAddress: Address
  ): OpenFlux__getAllListingsForCollectionResult {
    let result = super.call(
      "getAllListingsForCollection",
      "getAllListingsForCollection(address):(uint256[],(address,uint256,address,uint256,address,uint8,uint256)[])",
      [ethereum.Value.fromAddress(_collectionAddress)]
    );

    return new OpenFlux__getAllListingsForCollectionResult(
      result[0].toBigIntArray(),
      result[1].toTupleArray<
        OpenFlux__getAllListingsForCollectionResultValue1Struct
      >()
    );
  }

  try_getAllListingsForCollection(
    _collectionAddress: Address
  ): ethereum.CallResult<OpenFlux__getAllListingsForCollectionResult> {
    let result = super.tryCall(
      "getAllListingsForCollection",
      "getAllListingsForCollection(address):(uint256[],(address,uint256,address,uint256,address,uint8,uint256)[])",
      [ethereum.Value.fromAddress(_collectionAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpenFlux__getAllListingsForCollectionResult(
        value[0].toBigIntArray(),
        value[1].toTupleArray<
          OpenFlux__getAllListingsForCollectionResultValue1Struct
        >()
      )
    );
  }

  getAllOffersForCollection(
    _collectionAddress: Address
  ): OpenFlux__getAllOffersForCollectionResult {
    let result = super.call(
      "getAllOffersForCollection",
      "getAllOffersForCollection(address):(uint256[],(address,uint256,address,uint8,uint256)[])",
      [ethereum.Value.fromAddress(_collectionAddress)]
    );

    return new OpenFlux__getAllOffersForCollectionResult(
      result[0].toBigIntArray(),
      result[1].toTupleArray<
        OpenFlux__getAllOffersForCollectionResultValue1Struct
      >()
    );
  }

  try_getAllOffersForCollection(
    _collectionAddress: Address
  ): ethereum.CallResult<OpenFlux__getAllOffersForCollectionResult> {
    let result = super.tryCall(
      "getAllOffersForCollection",
      "getAllOffersForCollection(address):(uint256[],(address,uint256,address,uint8,uint256)[])",
      [ethereum.Value.fromAddress(_collectionAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpenFlux__getAllOffersForCollectionResult(
        value[0].toBigIntArray(),
        value[1].toTupleArray<
          OpenFlux__getAllOffersForCollectionResultValue1Struct
        >()
      )
    );
  }

  getAllOffersForNFT(
    _nftAddress: Address,
    _tokenId: BigInt
  ): OpenFlux__getAllOffersForNFTResult {
    let result = super.call(
      "getAllOffersForNFT",
      "getAllOffersForNFT(address,uint256):(uint256[],(uint256,address,uint256,address,uint8,uint256)[])",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );

    return new OpenFlux__getAllOffersForNFTResult(
      result[0].toBigIntArray(),
      result[1].toTupleArray<OpenFlux__getAllOffersForNFTResultValue1Struct>()
    );
  }

  try_getAllOffersForNFT(
    _nftAddress: Address,
    _tokenId: BigInt
  ): ethereum.CallResult<OpenFlux__getAllOffersForNFTResult> {
    let result = super.tryCall(
      "getAllOffersForNFT",
      "getAllOffersForNFT(address,uint256):(uint256[],(uint256,address,uint256,address,uint8,uint256)[])",
      [
        ethereum.Value.fromAddress(_nftAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpenFlux__getAllOffersForNFTResult(
        value[0].toBigIntArray(),
        value[1].toTupleArray<OpenFlux__getAllOffersForNFTResultValue1Struct>()
      )
    );
  }

  getTotalListingsForCollection(_collectionAddress: Address): BigInt {
    let result = super.call(
      "getTotalListingsForCollection",
      "getTotalListingsForCollection(address):(uint256)",
      [ethereum.Value.fromAddress(_collectionAddress)]
    );

    return result[0].toBigInt();
  }

  try_getTotalListingsForCollection(
    _collectionAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalListingsForCollection",
      "getTotalListingsForCollection(address):(uint256)",
      [ethereum.Value.fromAddress(_collectionAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserCollectionOffers(
    user: Address
  ): Array<OpenFlux__getUserCollectionOffersResultValue0Struct> {
    let result = super.call(
      "getUserCollectionOffers",
      "getUserCollectionOffers(address):((address,uint256,address,uint8,uint256)[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toTupleArray<
      OpenFlux__getUserCollectionOffersResultValue0Struct
    >();
  }

  try_getUserCollectionOffers(
    user: Address
  ): ethereum.CallResult<
    Array<OpenFlux__getUserCollectionOffersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getUserCollectionOffers",
      "getUserCollectionOffers(address):((address,uint256,address,uint8,uint256)[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        OpenFlux__getUserCollectionOffersResultValue0Struct
      >()
    );
  }

  getUserListings(
    user: Address
  ): Array<OpenFlux__getUserListingsResultValue0Struct> {
    let result = super.call(
      "getUserListings",
      "getUserListings(address):((address,uint256,address,uint256,address,uint8,uint256)[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toTupleArray<
      OpenFlux__getUserListingsResultValue0Struct
    >();
  }

  try_getUserListings(
    user: Address
  ): ethereum.CallResult<Array<OpenFlux__getUserListingsResultValue0Struct>> {
    let result = super.tryCall(
      "getUserListings",
      "getUserListings(address):((address,uint256,address,uint256,address,uint8,uint256)[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<OpenFlux__getUserListingsResultValue0Struct>()
    );
  }

  getUserOffersForNFTs(
    user: Address
  ): Array<OpenFlux__getUserOffersForNFTsResultValue0Struct> {
    let result = super.call(
      "getUserOffersForNFTs",
      "getUserOffersForNFTs(address):((uint256,address,uint256,address,uint8,uint256)[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toTupleArray<
      OpenFlux__getUserOffersForNFTsResultValue0Struct
    >();
  }

  try_getUserOffersForNFTs(
    user: Address
  ): ethereum.CallResult<
    Array<OpenFlux__getUserOffersForNFTsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getUserOffersForNFTs",
      "getUserOffersForNFTs(address):((uint256,address,uint256,address,uint8,uint256)[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<OpenFlux__getUserOffersForNFTsResultValue0Struct>()
    );
  }

  listingFees(param0: i32): BigInt {
    let result = super.call("listingFees", "listingFees(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toBigInt();
  }

  try_listingFees(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("listingFees", "listingFees(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  listings(param0: Address, param1: BigInt): OpenFlux__listingsResult {
    let result = super.call(
      "listings",
      "listings(address,uint256):(address,uint256,address,uint256,address,uint8,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new OpenFlux__listingsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toI32(),
      result[6].toBigInt()
    );
  }

  try_listings(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<OpenFlux__listingsResult> {
    let result = super.tryCall(
      "listings",
      "listings(address,uint256):(address,uint256,address,uint256,address,uint8,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpenFlux__listingsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toI32(),
        value[6].toBigInt()
      )
    );
  }

  nftAddresses(param0: BigInt): Address {
    let result = super.call("nftAddresses", "nftAddresses(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_nftAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nftAddresses",
      "nftAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  offersForNFT(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): OpenFlux__offersForNFTResult {
    let result = super.call(
      "offersForNFT",
      "offersForNFT(address,uint256,uint256):(uint256,address,uint256,address,uint8,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new OpenFlux__offersForNFTResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toI32(),
      result[5].toBigInt()
    );
  }

  try_offersForNFT(
    param0: Address,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<OpenFlux__offersForNFTResult> {
    let result = super.tryCall(
      "offersForNFT",
      "offersForNFT(address,uint256,uint256):(uint256,address,uint256,address,uint8,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpenFlux__offersForNFTResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toI32(),
        value[5].toBigInt()
      )
    );
  }

  offersForWholeCollection(
    param0: Address,
    param1: BigInt
  ): OpenFlux__offersForWholeCollectionResult {
    let result = super.call(
      "offersForWholeCollection",
      "offersForWholeCollection(address,uint256):(address,uint256,address,uint8,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new OpenFlux__offersForWholeCollectionResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toI32(),
      result[4].toBigInt()
    );
  }

  try_offersForWholeCollection(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<OpenFlux__offersForWholeCollectionResult> {
    let result = super.tryCall(
      "offersForWholeCollection",
      "offersForWholeCollection(address,uint256):(address,uint256,address,uint8,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpenFlux__offersForWholeCollectionResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toI32(),
        value[4].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasuryAddress(): Address {
    let result = super.call(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_treasuryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryAddress",
      "treasuryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOfferForCollectionCall extends ethereum.Call {
  get inputs(): AcceptOfferForCollectionCall__Inputs {
    return new AcceptOfferForCollectionCall__Inputs(this);
  }

  get outputs(): AcceptOfferForCollectionCall__Outputs {
    return new AcceptOfferForCollectionCall__Outputs(this);
  }
}

export class AcceptOfferForCollectionCall__Inputs {
  _call: AcceptOfferForCollectionCall;

  constructor(call: AcceptOfferForCollectionCall) {
    this._call = call;
  }

  get _collectionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _offerIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AcceptOfferForCollectionCall__Outputs {
  _call: AcceptOfferForCollectionCall;

  constructor(call: AcceptOfferForCollectionCall) {
    this._call = call;
  }
}

export class AcceptOfferForNFTCall extends ethereum.Call {
  get inputs(): AcceptOfferForNFTCall__Inputs {
    return new AcceptOfferForNFTCall__Inputs(this);
  }

  get outputs(): AcceptOfferForNFTCall__Outputs {
    return new AcceptOfferForNFTCall__Outputs(this);
  }
}

export class AcceptOfferForNFTCall__Inputs {
  _call: AcceptOfferForNFTCall;

  constructor(call: AcceptOfferForNFTCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _offerIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AcceptOfferForNFTCall__Outputs {
  _call: AcceptOfferForNFTCall;

  constructor(call: AcceptOfferForNFTCall) {
    this._call = call;
  }
}

export class AddApprovedTokenCall extends ethereum.Call {
  get inputs(): AddApprovedTokenCall__Inputs {
    return new AddApprovedTokenCall__Inputs(this);
  }

  get outputs(): AddApprovedTokenCall__Outputs {
    return new AddApprovedTokenCall__Outputs(this);
  }
}

export class AddApprovedTokenCall__Inputs {
  _call: AddApprovedTokenCall;

  constructor(call: AddApprovedTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddApprovedTokenCall__Outputs {
  _call: AddApprovedTokenCall;

  constructor(call: AddApprovedTokenCall) {
    this._call = call;
  }
}

export class AddCollectionCall extends ethereum.Call {
  get inputs(): AddCollectionCall__Inputs {
    return new AddCollectionCall__Inputs(this);
  }

  get outputs(): AddCollectionCall__Outputs {
    return new AddCollectionCall__Outputs(this);
  }
}

export class AddCollectionCall__Inputs {
  _call: AddCollectionCall;

  constructor(call: AddCollectionCall) {
    this._call = call;
  }

  get _collectionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddCollectionCall__Outputs {
  _call: AddCollectionCall;

  constructor(call: AddCollectionCall) {
    this._call = call;
  }
}

export class BuyNFTCall extends ethereum.Call {
  get inputs(): BuyNFTCall__Inputs {
    return new BuyNFTCall__Inputs(this);
  }

  get outputs(): BuyNFTCall__Outputs {
    return new BuyNFTCall__Outputs(this);
  }
}

export class BuyNFTCall__Inputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _listingIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyNFTCall__Outputs {
  _call: BuyNFTCall;

  constructor(call: BuyNFTCall) {
    this._call = call;
  }
}

export class CancelListingCall extends ethereum.Call {
  get inputs(): CancelListingCall__Inputs {
    return new CancelListingCall__Inputs(this);
  }

  get outputs(): CancelListingCall__Outputs {
    return new CancelListingCall__Outputs(this);
  }
}

export class CancelListingCall__Inputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _listingIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelListingCall__Outputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }
}

export class CancelOfferForCollectionCall extends ethereum.Call {
  get inputs(): CancelOfferForCollectionCall__Inputs {
    return new CancelOfferForCollectionCall__Inputs(this);
  }

  get outputs(): CancelOfferForCollectionCall__Outputs {
    return new CancelOfferForCollectionCall__Outputs(this);
  }
}

export class CancelOfferForCollectionCall__Inputs {
  _call: CancelOfferForCollectionCall;

  constructor(call: CancelOfferForCollectionCall) {
    this._call = call;
  }

  get _collectionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _offerIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelOfferForCollectionCall__Outputs {
  _call: CancelOfferForCollectionCall;

  constructor(call: CancelOfferForCollectionCall) {
    this._call = call;
  }
}

export class CancelOfferForNFTCall extends ethereum.Call {
  get inputs(): CancelOfferForNFTCall__Inputs {
    return new CancelOfferForNFTCall__Inputs(this);
  }

  get outputs(): CancelOfferForNFTCall__Outputs {
    return new CancelOfferForNFTCall__Outputs(this);
  }
}

export class CancelOfferForNFTCall__Inputs {
  _call: CancelOfferForNFTCall;

  constructor(call: CancelOfferForNFTCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _offerIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CancelOfferForNFTCall__Outputs {
  _call: CancelOfferForNFTCall;

  constructor(call: CancelOfferForNFTCall) {
    this._call = call;
  }
}

export class EditCollectionCall extends ethereum.Call {
  get inputs(): EditCollectionCall__Inputs {
    return new EditCollectionCall__Inputs(this);
  }

  get outputs(): EditCollectionCall__Outputs {
    return new EditCollectionCall__Outputs(this);
  }
}

export class EditCollectionCall__Inputs {
  _call: EditCollectionCall;

  constructor(call: EditCollectionCall) {
    this._call = call;
  }

  get _collectionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EditCollectionCall__Outputs {
  _call: EditCollectionCall;

  constructor(call: EditCollectionCall) {
    this._call = call;
  }
}

export class EditListingCall extends ethereum.Call {
  get inputs(): EditListingCall__Inputs {
    return new EditListingCall__Inputs(this);
  }

  get outputs(): EditListingCall__Outputs {
    return new EditListingCall__Outputs(this);
  }
}

export class EditListingCall__Inputs {
  _call: EditListingCall;

  constructor(call: EditListingCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _listingIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _newPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EditListingCall__Outputs {
  _call: EditListingCall;

  constructor(call: EditListingCall) {
    this._call = call;
  }
}

export class EditOfferForCollectionCall extends ethereum.Call {
  get inputs(): EditOfferForCollectionCall__Inputs {
    return new EditOfferForCollectionCall__Inputs(this);
  }

  get outputs(): EditOfferForCollectionCall__Outputs {
    return new EditOfferForCollectionCall__Outputs(this);
  }
}

export class EditOfferForCollectionCall__Inputs {
  _call: EditOfferForCollectionCall;

  constructor(call: EditOfferForCollectionCall) {
    this._call = call;
  }

  get _collectionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _offerIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _newAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EditOfferForCollectionCall__Outputs {
  _call: EditOfferForCollectionCall;

  constructor(call: EditOfferForCollectionCall) {
    this._call = call;
  }
}

export class EditOfferForNFTCall extends ethereum.Call {
  get inputs(): EditOfferForNFTCall__Inputs {
    return new EditOfferForNFTCall__Inputs(this);
  }

  get outputs(): EditOfferForNFTCall__Outputs {
    return new EditOfferForNFTCall__Outputs(this);
  }
}

export class EditOfferForNFTCall__Inputs {
  _call: EditOfferForNFTCall;

  constructor(call: EditOfferForNFTCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _offerIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _newAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class EditOfferForNFTCall__Outputs {
  _call: EditOfferForNFTCall;

  constructor(call: EditOfferForNFTCall) {
    this._call = call;
  }
}

export class ListNFTCall extends ethereum.Call {
  get inputs(): ListNFTCall__Inputs {
    return new ListNFTCall__Inputs(this);
  }

  get outputs(): ListNFTCall__Outputs {
    return new ListNFTCall__Outputs(this);
  }
}

export class ListNFTCall__Inputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _paymentToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _duration(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ListNFTCall__Outputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }
}

export class MakeOfferForCollectionCall extends ethereum.Call {
  get inputs(): MakeOfferForCollectionCall__Inputs {
    return new MakeOfferForCollectionCall__Inputs(this);
  }

  get outputs(): MakeOfferForCollectionCall__Outputs {
    return new MakeOfferForCollectionCall__Outputs(this);
  }
}

export class MakeOfferForCollectionCall__Inputs {
  _call: MakeOfferForCollectionCall;

  constructor(call: MakeOfferForCollectionCall) {
    this._call = call;
  }

  get _collectionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _paymentToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _duration(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class MakeOfferForCollectionCall__Outputs {
  _call: MakeOfferForCollectionCall;

  constructor(call: MakeOfferForCollectionCall) {
    this._call = call;
  }
}

export class MakeOfferForNFTCall extends ethereum.Call {
  get inputs(): MakeOfferForNFTCall__Inputs {
    return new MakeOfferForNFTCall__Inputs(this);
  }

  get outputs(): MakeOfferForNFTCall__Outputs {
    return new MakeOfferForNFTCall__Outputs(this);
  }
}

export class MakeOfferForNFTCall__Inputs {
  _call: MakeOfferForNFTCall;

  constructor(call: MakeOfferForNFTCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _duration(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class MakeOfferForNFTCall__Outputs {
  _call: MakeOfferForNFTCall;

  constructor(call: MakeOfferForNFTCall) {
    this._call = call;
  }
}

export class RemoveApprovedTokenCall extends ethereum.Call {
  get inputs(): RemoveApprovedTokenCall__Inputs {
    return new RemoveApprovedTokenCall__Inputs(this);
  }

  get outputs(): RemoveApprovedTokenCall__Outputs {
    return new RemoveApprovedTokenCall__Outputs(this);
  }
}

export class RemoveApprovedTokenCall__Inputs {
  _call: RemoveApprovedTokenCall;

  constructor(call: RemoveApprovedTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveApprovedTokenCall__Outputs {
  _call: RemoveApprovedTokenCall;

  constructor(call: RemoveApprovedTokenCall) {
    this._call = call;
  }
}

export class RemoveCollectionCall extends ethereum.Call {
  get inputs(): RemoveCollectionCall__Inputs {
    return new RemoveCollectionCall__Inputs(this);
  }

  get outputs(): RemoveCollectionCall__Outputs {
    return new RemoveCollectionCall__Outputs(this);
  }
}

export class RemoveCollectionCall__Inputs {
  _call: RemoveCollectionCall;

  constructor(call: RemoveCollectionCall) {
    this._call = call;
  }

  get _collectionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveCollectionCall__Outputs {
  _call: RemoveCollectionCall;

  constructor(call: RemoveCollectionCall) {
    this._call = call;
  }
}

export class RemoveExpiredCollectionOffersCall extends ethereum.Call {
  get inputs(): RemoveExpiredCollectionOffersCall__Inputs {
    return new RemoveExpiredCollectionOffersCall__Inputs(this);
  }

  get outputs(): RemoveExpiredCollectionOffersCall__Outputs {
    return new RemoveExpiredCollectionOffersCall__Outputs(this);
  }
}

export class RemoveExpiredCollectionOffersCall__Inputs {
  _call: RemoveExpiredCollectionOffersCall;

  constructor(call: RemoveExpiredCollectionOffersCall) {
    this._call = call;
  }
}

export class RemoveExpiredCollectionOffersCall__Outputs {
  _call: RemoveExpiredCollectionOffersCall;

  constructor(call: RemoveExpiredCollectionOffersCall) {
    this._call = call;
  }
}

export class RemoveExpiredListingsCall extends ethereum.Call {
  get inputs(): RemoveExpiredListingsCall__Inputs {
    return new RemoveExpiredListingsCall__Inputs(this);
  }

  get outputs(): RemoveExpiredListingsCall__Outputs {
    return new RemoveExpiredListingsCall__Outputs(this);
  }
}

export class RemoveExpiredListingsCall__Inputs {
  _call: RemoveExpiredListingsCall;

  constructor(call: RemoveExpiredListingsCall) {
    this._call = call;
  }
}

export class RemoveExpiredListingsCall__Outputs {
  _call: RemoveExpiredListingsCall;

  constructor(call: RemoveExpiredListingsCall) {
    this._call = call;
  }
}

export class RemoveExpiredOffersForNFTCall extends ethereum.Call {
  get inputs(): RemoveExpiredOffersForNFTCall__Inputs {
    return new RemoveExpiredOffersForNFTCall__Inputs(this);
  }

  get outputs(): RemoveExpiredOffersForNFTCall__Outputs {
    return new RemoveExpiredOffersForNFTCall__Outputs(this);
  }
}

export class RemoveExpiredOffersForNFTCall__Inputs {
  _call: RemoveExpiredOffersForNFTCall;

  constructor(call: RemoveExpiredOffersForNFTCall) {
    this._call = call;
  }
}

export class RemoveExpiredOffersForNFTCall__Outputs {
  _call: RemoveExpiredOffersForNFTCall;

  constructor(call: RemoveExpiredOffersForNFTCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCollectionFeeRateCall extends ethereum.Call {
  get inputs(): SetCollectionFeeRateCall__Inputs {
    return new SetCollectionFeeRateCall__Inputs(this);
  }

  get outputs(): SetCollectionFeeRateCall__Outputs {
    return new SetCollectionFeeRateCall__Outputs(this);
  }
}

export class SetCollectionFeeRateCall__Inputs {
  _call: SetCollectionFeeRateCall;

  constructor(call: SetCollectionFeeRateCall) {
    this._call = call;
  }

  get _collectionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newFeeRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCollectionFeeRateCall__Outputs {
  _call: SetCollectionFeeRateCall;

  constructor(call: SetCollectionFeeRateCall) {
    this._call = call;
  }
}

export class SetContractCommissionRateCall extends ethereum.Call {
  get inputs(): SetContractCommissionRateCall__Inputs {
    return new SetContractCommissionRateCall__Inputs(this);
  }

  get outputs(): SetContractCommissionRateCall__Outputs {
    return new SetContractCommissionRateCall__Outputs(this);
  }
}

export class SetContractCommissionRateCall__Inputs {
  _call: SetContractCommissionRateCall;

  constructor(call: SetContractCommissionRateCall) {
    this._call = call;
  }

  get _rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetContractCommissionRateCall__Outputs {
  _call: SetContractCommissionRateCall;

  constructor(call: SetContractCommissionRateCall) {
    this._call = call;
  }
}

export class SetListingFeeCall extends ethereum.Call {
  get inputs(): SetListingFeeCall__Inputs {
    return new SetListingFeeCall__Inputs(this);
  }

  get outputs(): SetListingFeeCall__Outputs {
    return new SetListingFeeCall__Outputs(this);
  }
}

export class SetListingFeeCall__Inputs {
  _call: SetListingFeeCall;

  constructor(call: SetListingFeeCall) {
    this._call = call;
  }

  get _duration(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetListingFeeCall__Outputs {
  _call: SetListingFeeCall;

  constructor(call: SetListingFeeCall) {
    this._call = call;
  }
}

export class SetTreasuryAddressCall extends ethereum.Call {
  get inputs(): SetTreasuryAddressCall__Inputs {
    return new SetTreasuryAddressCall__Inputs(this);
  }

  get outputs(): SetTreasuryAddressCall__Outputs {
    return new SetTreasuryAddressCall__Outputs(this);
  }
}

export class SetTreasuryAddressCall__Inputs {
  _call: SetTreasuryAddressCall;

  constructor(call: SetTreasuryAddressCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryAddressCall__Outputs {
  _call: SetTreasuryAddressCall;

  constructor(call: SetTreasuryAddressCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
